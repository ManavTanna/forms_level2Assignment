{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useFormValidation = () => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const validate = values => {\n    let errors = {};\n    if (!values.fullName) {\n      errors.fullName = 'Full Name is required';\n    }\n    if (!values.email) {\n      errors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n      errors.email = 'Email is invalid';\n    }\n    if (!values.phone) {\n      errors.phone = 'Phone Number is required';\n    } else if (!/^\\d{10}$/.test(values.phone)) {\n      errors.phone = 'Phone Number is invalid';\n    }\n    if (!values.position) {\n      errors.position = 'Position is required';\n    }\n    if (values.position === 'Developer' || values.position === 'Designer') {\n      if (!values.experience) {\n        errors.experience = 'Relevant Experience is required';\n      } else if (isNaN(values.experience) || parseInt(values.experience) <= 0) {\n        errors.experience = 'Experience must be a number greater than 0';\n      }\n    }\n    if (values.position === 'Designer') {\n      if (!values.portfolio) {\n        errors.portfolio = 'Portfolio URL is required';\n      } else if (!isValidUrl(values.portfolio)) {\n        errors.portfolio = 'Portfolio URL is invalid';\n      }\n    }\n    if (values.position === 'Manager') {\n      if (!values.managementExperience) {\n        errors.managementExperience = 'Management Experience is required';\n      }\n    }\n    if (values.skills.length === 0) {\n      errors.skills = 'At least one skill must be selected';\n    }\n    if (!values.interviewTime) {\n      errors.interviewTime = 'Preferred Interview Time is required';\n    }\n    return errors;\n  };\n  const isValidUrl = url => {\n    try {\n      new URL(url);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  return {\n    errors,\n    validate\n  };\n};\n_s(useFormValidation, \"o+SUXTQUSJNurFcpxixiLrA9BM0=\");\nexport default useFormValidation;","map":{"version":3,"names":["useState","useFormValidation","_s","errors","setErrors","validate","values","fullName","email","test","phone","position","experience","isNaN","parseInt","portfolio","isValidUrl","managementExperience","skills","length","interviewTime","url","URL","error"],"sources":["C:/Users/Manav/OneDrive/Desktop/forms_assignment/level_2/src/hooks/useValidation.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useFormValidation = () => {\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validate = (values) => {\r\n    let errors = {};\r\n\r\n    if (!values.fullName) {\r\n      errors.fullName = 'Full Name is required';\r\n    }\r\n\r\n    if (!values.email) {\r\n      errors.email = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n      errors.email = 'Email is invalid';\r\n    }\r\n\r\n    if (!values.phone) {\r\n      errors.phone = 'Phone Number is required';\r\n    } else if (!/^\\d{10}$/.test(values.phone)) {\r\n      errors.phone = 'Phone Number is invalid';\r\n    }\r\n\r\n    if (!values.position) {\r\n      errors.position = 'Position is required';\r\n    }\r\n\r\n    if (values.position === 'Developer' || values.position === 'Designer') {\r\n      if (!values.experience) {\r\n        errors.experience = 'Relevant Experience is required';\r\n      } else if (isNaN(values.experience) || parseInt(values.experience) <= 0) {\r\n        errors.experience = 'Experience must be a number greater than 0';\r\n      }\r\n    }\r\n\r\n    if (values.position === 'Designer') {\r\n      if (!values.portfolio) {\r\n        errors.portfolio = 'Portfolio URL is required';\r\n      } else if (!isValidUrl(values.portfolio)) {\r\n        errors.portfolio = 'Portfolio URL is invalid';\r\n      }\r\n    }\r\n\r\n    if (values.position === 'Manager') {\r\n      if (!values.managementExperience) {\r\n        errors.managementExperience = 'Management Experience is required';\r\n      }\r\n    }\r\n\r\n    if (values.skills.length === 0) {\r\n      errors.skills = 'At least one skill must be selected';\r\n    }\r\n\r\n    if (!values.interviewTime) {\r\n      errors.interviewTime = 'Preferred Interview Time is required';\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const isValidUrl = (url) => {\r\n    try {\r\n      new URL(url);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    errors,\r\n    validate\r\n  };\r\n};\r\n\r\nexport default useFormValidation;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMK,QAAQ,GAAIC,MAAM,IAAK;IAC3B,IAAIH,MAAM,GAAG,CAAC,CAAC;IAEf,IAAI,CAACG,MAAM,CAACC,QAAQ,EAAE;MACpBJ,MAAM,CAACI,QAAQ,GAAG,uBAAuB;IAC3C;IAEA,IAAI,CAACD,MAAM,CAACE,KAAK,EAAE;MACjBL,MAAM,CAACK,KAAK,GAAG,mBAAmB;IACpC,CAAC,MAAM,IAAI,CAAC,cAAc,CAACC,IAAI,CAACH,MAAM,CAACE,KAAK,CAAC,EAAE;MAC7CL,MAAM,CAACK,KAAK,GAAG,kBAAkB;IACnC;IAEA,IAAI,CAACF,MAAM,CAACI,KAAK,EAAE;MACjBP,MAAM,CAACO,KAAK,GAAG,0BAA0B;IAC3C,CAAC,MAAM,IAAI,CAAC,UAAU,CAACD,IAAI,CAACH,MAAM,CAACI,KAAK,CAAC,EAAE;MACzCP,MAAM,CAACO,KAAK,GAAG,yBAAyB;IAC1C;IAEA,IAAI,CAACJ,MAAM,CAACK,QAAQ,EAAE;MACpBR,MAAM,CAACQ,QAAQ,GAAG,sBAAsB;IAC1C;IAEA,IAAIL,MAAM,CAACK,QAAQ,KAAK,WAAW,IAAIL,MAAM,CAACK,QAAQ,KAAK,UAAU,EAAE;MACrE,IAAI,CAACL,MAAM,CAACM,UAAU,EAAE;QACtBT,MAAM,CAACS,UAAU,GAAG,iCAAiC;MACvD,CAAC,MAAM,IAAIC,KAAK,CAACP,MAAM,CAACM,UAAU,CAAC,IAAIE,QAAQ,CAACR,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC,EAAE;QACvET,MAAM,CAACS,UAAU,GAAG,4CAA4C;MAClE;IACF;IAEA,IAAIN,MAAM,CAACK,QAAQ,KAAK,UAAU,EAAE;MAClC,IAAI,CAACL,MAAM,CAACS,SAAS,EAAE;QACrBZ,MAAM,CAACY,SAAS,GAAG,2BAA2B;MAChD,CAAC,MAAM,IAAI,CAACC,UAAU,CAACV,MAAM,CAACS,SAAS,CAAC,EAAE;QACxCZ,MAAM,CAACY,SAAS,GAAG,0BAA0B;MAC/C;IACF;IAEA,IAAIT,MAAM,CAACK,QAAQ,KAAK,SAAS,EAAE;MACjC,IAAI,CAACL,MAAM,CAACW,oBAAoB,EAAE;QAChCd,MAAM,CAACc,oBAAoB,GAAG,mCAAmC;MACnE;IACF;IAEA,IAAIX,MAAM,CAACY,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9BhB,MAAM,CAACe,MAAM,GAAG,qCAAqC;IACvD;IAEA,IAAI,CAACZ,MAAM,CAACc,aAAa,EAAE;MACzBjB,MAAM,CAACiB,aAAa,GAAG,sCAAsC;IAC/D;IAEA,OAAOjB,MAAM;EACf,CAAC;EAED,MAAMa,UAAU,GAAIK,GAAG,IAAK;IAC1B,IAAI;MACF,IAAIC,GAAG,CAACD,GAAG,CAAC;MACZ,OAAO,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF,CAAC;EAED,OAAO;IACLpB,MAAM;IACNE;EACF,CAAC;AACH,CAAC;AAACH,EAAA,CAxEID,iBAAiB;AA0EvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}