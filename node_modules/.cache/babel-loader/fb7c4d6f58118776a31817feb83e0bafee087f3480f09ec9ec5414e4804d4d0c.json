{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useJobApplicationValidation = () => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const [touchedFields, setTouchedFields] = useState({});\n  const validateForm = formData => {\n    let valid = true;\n    const newErrors = {};\n\n    // Validate Full Name\n    if (!formData.fullName.trim()) {\n      newErrors.fullName = 'Full Name is required';\n      valid = false;\n    }\n\n    // Validate Email\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n      valid = false;\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email is invalid';\n      valid = false;\n    }\n\n    // Validate Phone Number\n    if (!formData.phoneNumber.trim()) {\n      newErrors.phoneNumber = 'Phone Number is required';\n      valid = false;\n    } else if (!/^\\d{10}$/.test(formData.phoneNumber)) {\n      newErrors.phoneNumber = 'Phone Number should be 10 digits';\n      valid = false;\n    }\n\n    // Validate Applying for Position\n    if (!formData.applyingForPosition.trim()) {\n      newErrors.applyingForPosition = 'Applying for Position is required';\n      valid = false;\n    }\n\n    // Validate Relevant Experience for Developer or Designer\n    if (formData.applyingForPosition === 'Developer' || formData.applyingForPosition === 'Designer') {\n      if (!formData.relevantExperience.trim()) {\n        newErrors.relevantExperience = 'Relevant Experience is required';\n        valid = false;\n      }\n    }\n\n    // Validate Portfolio URL for Designer\n    if (formData.applyingForPosition === 'Designer') {\n      if (!formData.portfolioURL.trim()) {\n        newErrors.portfolioURL = 'Portfolio URL is required';\n        valid = false;\n      }\n    }\n\n    // Validate Additional Skills (at least one should be selected)\n    const selectedSkills = Object.values(formData.additionalSkills).filter(Boolean);\n    if (selectedSkills.length === 0) {\n      newErrors.additionalSkills = 'Please select at least one Additional Skill';\n      valid = false;\n    }\n\n    // Validate Preferred Interview Time\n    if (!formData.preferredInterviewTime) {\n      newErrors.preferredInterviewTime = 'Preferred Interview Time is required';\n      valid = false;\n    }\n    setErrors(newErrors);\n    return valid;\n  };\n  const validateField = fieldName => {\n    setTouchedFields({\n      ...touchedFields,\n      [fieldName]: true\n    });\n  };\n  return {\n    errors,\n    touchedFields,\n    validateForm,\n    validateField\n  };\n};\n_s(useJobApplicationValidation, \"QffDrc0aRC//FXEGlJ2zJKI9VWM=\");\nexport default useJobApplicationValidation;","map":{"version":3,"names":["useState","useJobApplicationValidation","_s","errors","setErrors","touchedFields","setTouchedFields","validateForm","formData","valid","newErrors","fullName","trim","email","test","phoneNumber","applyingForPosition","relevantExperience","portfolioURL","selectedSkills","Object","values","additionalSkills","filter","Boolean","length","preferredInterviewTime","validateField","fieldName"],"sources":["C:/Users/Manav/OneDrive/Desktop/forms_assignment/level_2/src/hooks/useValidation.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useJobApplicationValidation = () => {\r\n  const [errors, setErrors] = useState({});\r\n  const [touchedFields, setTouchedFields] = useState({});\r\n\r\n  const validateForm = (formData) => {\r\n    let valid = true;\r\n    const newErrors = {};\r\n\r\n    // Validate Full Name\r\n    if (!formData.fullName.trim()) {\r\n      newErrors.fullName = 'Full Name is required';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate Email\r\n    if (!formData.email.trim()) {\r\n      newErrors.email = 'Email is required';\r\n      valid = false;\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = 'Email is invalid';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate Phone Number\r\n    if (!formData.phoneNumber.trim()) {\r\n      newErrors.phoneNumber = 'Phone Number is required';\r\n      valid = false;\r\n    } else if (!/^\\d{10}$/.test(formData.phoneNumber)) {\r\n      newErrors.phoneNumber = 'Phone Number should be 10 digits';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate Applying for Position\r\n    if (!formData.applyingForPosition.trim()) {\r\n      newErrors.applyingForPosition = 'Applying for Position is required';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate Relevant Experience for Developer or Designer\r\n    if (formData.applyingForPosition === 'Developer' || formData.applyingForPosition === 'Designer') {\r\n      if (!formData.relevantExperience.trim()) {\r\n        newErrors.relevantExperience = 'Relevant Experience is required';\r\n        valid = false;\r\n      }\r\n    }\r\n\r\n    // Validate Portfolio URL for Designer\r\n    if (formData.applyingForPosition === 'Designer') {\r\n      if (!formData.portfolioURL.trim()) {\r\n        newErrors.portfolioURL = 'Portfolio URL is required';\r\n        valid = false;\r\n      }\r\n    }\r\n\r\n    // Validate Additional Skills (at least one should be selected)\r\n    const selectedSkills = Object.values(formData.additionalSkills).filter(Boolean);\r\n    if (selectedSkills.length === 0) {\r\n      newErrors.additionalSkills = 'Please select at least one Additional Skill';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate Preferred Interview Time\r\n    if (!formData.preferredInterviewTime) {\r\n      newErrors.preferredInterviewTime = 'Preferred Interview Time is required';\r\n      valid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\n\r\n  const validateField = (fieldName) => {\r\n    setTouchedFields({\r\n      ...touchedFields,\r\n      [fieldName]: true,\r\n    });\r\n  };\r\n\r\n  return { errors, touchedFields, validateForm, validateField };\r\n};\r\n\r\nexport default useJobApplicationValidation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}