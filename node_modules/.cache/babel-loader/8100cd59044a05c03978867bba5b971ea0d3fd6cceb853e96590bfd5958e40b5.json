{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useFormValidation.js\nimport { useState } from 'react';\nconst useFormValidation = (formData, touchedFields) => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const validate = () => {\n    const newErrors = {};\n\n    // Validate fullName\n    if (touchedFields.fullName && !formData.fullName.trim()) {\n      newErrors.fullName = 'Full Name is required';\n    }\n\n    // Validate email\n    if (touchedFields.email && !formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (touchedFields.email && !/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email address is invalid';\n    }\n\n    // Validate phoneNumber\n    if (touchedFields.phoneNumber && !formData.phoneNumber.trim()) {\n      newErrors.phoneNumber = 'Phone Number is required';\n    }\n\n    // Validate applyingForPosition\n    if (touchedFields.applyingForPosition && !formData.applyingForPosition) {\n      newErrors.applyingForPosition = 'Applying for Position is required';\n    }\n\n    // Validate relevantExperience if applying for Developer\n    if (touchedFields.relevantExperience && formData.applyingForPosition === 'Developer' && !formData.relevantExperience) {\n      newErrors.relevantExperience = 'Relevant Experience is required';\n    }\n\n    // Validate portfolioURL if applying for Designer\n    if (touchedFields.portfolioURL && formData.applyingForPosition === 'Designer' && !formData.portfolioURL) {\n      newErrors.relevantExperience = 'Relevant Experience is required';\n    }\n    {\n      newErrors.portfolioURL = 'Portfolio URL is required';\n    }\n\n    // Validate managementExperience if applying for Manager\n    if (touchedFields.managementExperience && formData.applyingForPosition === 'Manager' && !formData.managementExperience) {\n      newErrors.managementExperience = 'Management Experience is required';\n    }\n    // Validate preferredInterviewTime\n    if (touchedFields.preferredInterviewTime && !formData.preferredInterviewTime.trim()) {\n      newErrors.preferredInterviewTime = 'Preferred Interview Time is required';\n    }\n    setErrors(newErrors);\n    return newErrors;\n  };\n  return {\n    errors,\n    validate\n  };\n};\n_s(useFormValidation, \"o+SUXTQUSJNurFcpxixiLrA9BM0=\");\nexport default useFormValidation;","map":{"version":3,"names":["useState","useFormValidation","formData","touchedFields","_s","errors","setErrors","validate","newErrors","fullName","trim","email","test","phoneNumber","applyingForPosition","relevantExperience","portfolioURL","managementExperience","preferredInterviewTime"],"sources":["C:/Users/Manav/OneDrive/Desktop/forms_assignment/level_2/src/hooks/Validation.js"],"sourcesContent":["// hooks/useFormValidation.js\r\nimport { useState } from 'react';\r\n\r\nconst useFormValidation = (formData, touchedFields) => {\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validate = () => {\r\n    const newErrors = {};\r\n\r\n    // Validate fullName\r\n    if (touchedFields.fullName && !formData.fullName.trim()) {\r\n      newErrors.fullName = 'Full Name is required';\r\n    }\r\n\r\n    // Validate email\r\n    if (touchedFields.email && !formData.email.trim()) {\r\n      newErrors.email = 'Email is required';\r\n    } else if (touchedFields.email && !/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = 'Email address is invalid';\r\n    }\r\n\r\n    // Validate phoneNumber\r\n    if (touchedFields.phoneNumber && !formData.phoneNumber.trim()) {\r\n      newErrors.phoneNumber = 'Phone Number is required';\r\n    }\r\n\r\n    // Validate applyingForPosition\r\n    if (touchedFields.applyingForPosition && !formData.applyingForPosition) {\r\n      newErrors.applyingForPosition = 'Applying for Position is required';\r\n    }\r\n\r\n    // Validate relevantExperience if applying for Developer\r\n    if (\r\n      touchedFields.relevantExperience &&\r\n      formData.applyingForPosition === 'Developer' &&\r\n      !formData.relevantExperience\r\n    ) {\r\n      newErrors.relevantExperience = 'Relevant Experience is required';\r\n    }\r\n\r\n    // Validate portfolioURL if applying for Designer\r\n    if (\r\n      touchedFields.portfolioURL &&\r\n      formData.applyingForPosition === 'Designer' &&\r\n      !formData.portfolioURL\r\n    ) {\r\n      newErrors.relevantExperience = 'Relevant Experience is required';\r\n    } \r\n    {\r\n      newErrors.portfolioURL = 'Portfolio URL is required';\r\n    }\r\n\r\n    // Validate managementExperience if applying for Manager\r\n    if (\r\n      touchedFields.managementExperience &&\r\n      formData.applyingForPosition === 'Manager' &&\r\n      !formData.managementExperience\r\n    ) {\r\n      newErrors.managementExperience = 'Management Experience is required';\r\n    }\r\n    // Validate preferredInterviewTime\r\n    if (touchedFields.preferredInterviewTime && !formData.preferredInterviewTime.trim()) {\r\n      newErrors.preferredInterviewTime = 'Preferred Interview Time is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return newErrors;\r\n  };\r\n\r\n  return { errors, validate };\r\n};\r\n\r\nexport default useFormValidation;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,aAAa,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMO,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,SAAS,GAAG,CAAC,CAAC;;IAEpB;IACA,IAAIL,aAAa,CAACM,QAAQ,IAAI,CAACP,QAAQ,CAACO,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAE;MACvDF,SAAS,CAACC,QAAQ,GAAG,uBAAuB;IAC9C;;IAEA;IACA,IAAIN,aAAa,CAACQ,KAAK,IAAI,CAACT,QAAQ,CAACS,KAAK,CAACD,IAAI,CAAC,CAAC,EAAE;MACjDF,SAAS,CAACG,KAAK,GAAG,mBAAmB;IACvC,CAAC,MAAM,IAAIR,aAAa,CAACQ,KAAK,IAAI,CAAC,cAAc,CAACC,IAAI,CAACV,QAAQ,CAACS,KAAK,CAAC,EAAE;MACtEH,SAAS,CAACG,KAAK,GAAG,0BAA0B;IAC9C;;IAEA;IACA,IAAIR,aAAa,CAACU,WAAW,IAAI,CAACX,QAAQ,CAACW,WAAW,CAACH,IAAI,CAAC,CAAC,EAAE;MAC7DF,SAAS,CAACK,WAAW,GAAG,0BAA0B;IACpD;;IAEA;IACA,IAAIV,aAAa,CAACW,mBAAmB,IAAI,CAACZ,QAAQ,CAACY,mBAAmB,EAAE;MACtEN,SAAS,CAACM,mBAAmB,GAAG,mCAAmC;IACrE;;IAEA;IACA,IACEX,aAAa,CAACY,kBAAkB,IAChCb,QAAQ,CAACY,mBAAmB,KAAK,WAAW,IAC5C,CAACZ,QAAQ,CAACa,kBAAkB,EAC5B;MACAP,SAAS,CAACO,kBAAkB,GAAG,iCAAiC;IAClE;;IAEA;IACA,IACEZ,aAAa,CAACa,YAAY,IAC1Bd,QAAQ,CAACY,mBAAmB,KAAK,UAAU,IAC3C,CAACZ,QAAQ,CAACc,YAAY,EACtB;MACAR,SAAS,CAACO,kBAAkB,GAAG,iCAAiC;IAClE;IACA;MACEP,SAAS,CAACQ,YAAY,GAAG,2BAA2B;IACtD;;IAEA;IACA,IACEb,aAAa,CAACc,oBAAoB,IAClCf,QAAQ,CAACY,mBAAmB,KAAK,SAAS,IAC1C,CAACZ,QAAQ,CAACe,oBAAoB,EAC9B;MACAT,SAAS,CAACS,oBAAoB,GAAG,mCAAmC;IACtE;IACA;IACA,IAAId,aAAa,CAACe,sBAAsB,IAAI,CAAChB,QAAQ,CAACgB,sBAAsB,CAACR,IAAI,CAAC,CAAC,EAAE;MACnFF,SAAS,CAACU,sBAAsB,GAAG,sCAAsC;IAC3E;IAEAZ,SAAS,CAACE,SAAS,CAAC;IACpB,OAAOA,SAAS;EAClB,CAAC;EAED,OAAO;IAAEH,MAAM;IAAEE;EAAS,CAAC;AAC7B,CAAC;AAACH,EAAA,CAnEIH,iBAAiB;AAqEvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}