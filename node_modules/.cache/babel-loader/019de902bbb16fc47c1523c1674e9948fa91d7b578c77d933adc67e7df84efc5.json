{"ast":null,"code":"var _s = $RefreshSig$();\n// useValidation.js\n\nimport { useState } from 'react';\nimport validator from 'validator';\nconst useValidation = () => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const validate = values => {\n    let tempErrors = {};\n\n    // Validation logic for each field\n    if (!values.fullName) {\n      newErrors.fullName = 'Full Name is required';\n    }\n    if (!values.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n      newErrors.email = 'Email address is invalid';\n    }\n    if (!values.phone) {\n      newErrors.phone = 'Phone Number is required';\n    } else if (!validator.isNumeric(values.phone)) {\n      newErrors.phone = 'Phone Number must only contain digits';\n    }\n    if (!values.position) {\n      newErrors.position = 'Position is required';\n    }\n    if ((values.position === 'Developer' || values.position === 'Designer') && !values.experience) {\n      newErrors.experience = 'Relevant Experience is required';\n    }\n    if (values.position === 'Designer' && !values.portfolio) {\n      newErrors.portfolio = 'Portfolio URL is required';\n    }\n    if (values.position === 'Manager' && !values.managementExperience) {\n      newErrors.managementExperience = 'Management Experience is required';\n    }\n    if (!values.skills || values.skills.length === 0) {\n      newErrors.skills = 'At least one skill must be selected';\n    }\n    if (!values.interviewTime) {\n      newErrors.interviewTime = 'Preferred Interview Time and Date is required';\n    }\n\n    // Update errors state\n    setErrors(tempErrors);\n    return Object.keys(tempErrors).length === 0;\n    // Return true if no errors, false otherwise\n  };\n  return {\n    errors,\n    validate\n  };\n};\n_s(useValidation, \"o+SUXTQUSJNurFcpxixiLrA9BM0=\");\nexport default useValidation;","map":{"version":3,"names":["useState","validator","useValidation","_s","errors","setErrors","validate","values","tempErrors","fullName","newErrors","email","test","phone","isNumeric","position","experience","portfolio","managementExperience","skills","length","interviewTime","Object","keys"],"sources":["C:/Users/Manav/OneDrive/Desktop/forms_assignment/level_2/src/hooks/useValidation.js"],"sourcesContent":["// useValidation.js\r\n\r\nimport { useState } from 'react';\r\nimport validator from 'validator';\r\n\r\nconst useValidation = () => {\r\n  const [errors, setErrors] = useState({});\r\n\r\n  \r\n\r\n  const validate = (values) => {\r\n   let tempErrors = {};\r\n\r\n    // Validation logic for each field\r\n    if (!values.fullName) {\r\n      newErrors.fullName = 'Full Name is required';\r\n    }\r\n\r\n    if (!values.email) {\r\n      newErrors.email = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n      newErrors.email = 'Email address is invalid';\r\n    }\r\n\r\n    if (!values.phone) {\r\n      newErrors.phone = 'Phone Number is required';\r\n    } else if (!validator.isNumeric(values.phone)) {\r\n      newErrors.phone = 'Phone Number must only contain digits';\r\n    }\r\n\r\n    if (!values.position) {\r\n      newErrors.position = 'Position is required';\r\n    }\r\n\r\n    if ((values.position === 'Developer' || values.position === 'Designer') && !values.experience) {\r\n      newErrors.experience = 'Relevant Experience is required';\r\n    }\r\n\r\n    if (values.position === 'Designer' && !values.portfolio) {\r\n      newErrors.portfolio = 'Portfolio URL is required';\r\n    }\r\n\r\n    if (values.position === 'Manager' && !values.managementExperience) {\r\n      newErrors.managementExperience = 'Management Experience is required';\r\n    }\r\n\r\n    if (!values.skills || values.skills.length === 0) {\r\n      newErrors.skills = 'At least one skill must be selected';\r\n    }\r\n\r\n    if (!values.interviewTime) {\r\n      newErrors.interviewTime = 'Preferred Interview Time and Date is required';\r\n    }\r\n\r\n    // Update errors state\r\n    setErrors(tempErrors);\r\n    return Object.keys(tempErrors).length === 0;\r\n    // Return true if no errors, false otherwise\r\n    \r\n  };\r\n\r\n  return {\r\n    errors,\r\n    validate,\r\n  };\r\n};\r\n\r\nexport default useValidation;\r\n"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,WAAW;AAEjC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAIxC,MAAMM,QAAQ,GAAIC,MAAM,IAAK;IAC5B,IAAIC,UAAU,GAAG,CAAC,CAAC;;IAElB;IACA,IAAI,CAACD,MAAM,CAACE,QAAQ,EAAE;MACpBC,SAAS,CAACD,QAAQ,GAAG,uBAAuB;IAC9C;IAEA,IAAI,CAACF,MAAM,CAACI,KAAK,EAAE;MACjBD,SAAS,CAACC,KAAK,GAAG,mBAAmB;IACvC,CAAC,MAAM,IAAI,CAAC,cAAc,CAACC,IAAI,CAACL,MAAM,CAACI,KAAK,CAAC,EAAE;MAC7CD,SAAS,CAACC,KAAK,GAAG,0BAA0B;IAC9C;IAEA,IAAI,CAACJ,MAAM,CAACM,KAAK,EAAE;MACjBH,SAAS,CAACG,KAAK,GAAG,0BAA0B;IAC9C,CAAC,MAAM,IAAI,CAACZ,SAAS,CAACa,SAAS,CAACP,MAAM,CAACM,KAAK,CAAC,EAAE;MAC7CH,SAAS,CAACG,KAAK,GAAG,uCAAuC;IAC3D;IAEA,IAAI,CAACN,MAAM,CAACQ,QAAQ,EAAE;MACpBL,SAAS,CAACK,QAAQ,GAAG,sBAAsB;IAC7C;IAEA,IAAI,CAACR,MAAM,CAACQ,QAAQ,KAAK,WAAW,IAAIR,MAAM,CAACQ,QAAQ,KAAK,UAAU,KAAK,CAACR,MAAM,CAACS,UAAU,EAAE;MAC7FN,SAAS,CAACM,UAAU,GAAG,iCAAiC;IAC1D;IAEA,IAAIT,MAAM,CAACQ,QAAQ,KAAK,UAAU,IAAI,CAACR,MAAM,CAACU,SAAS,EAAE;MACvDP,SAAS,CAACO,SAAS,GAAG,2BAA2B;IACnD;IAEA,IAAIV,MAAM,CAACQ,QAAQ,KAAK,SAAS,IAAI,CAACR,MAAM,CAACW,oBAAoB,EAAE;MACjER,SAAS,CAACQ,oBAAoB,GAAG,mCAAmC;IACtE;IAEA,IAAI,CAACX,MAAM,CAACY,MAAM,IAAIZ,MAAM,CAACY,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAChDV,SAAS,CAACS,MAAM,GAAG,qCAAqC;IAC1D;IAEA,IAAI,CAACZ,MAAM,CAACc,aAAa,EAAE;MACzBX,SAAS,CAACW,aAAa,GAAG,+CAA+C;IAC3E;;IAEA;IACAhB,SAAS,CAACG,UAAU,CAAC;IACrB,OAAOc,MAAM,CAACC,IAAI,CAACf,UAAU,CAAC,CAACY,MAAM,KAAK,CAAC;IAC3C;EAEF,CAAC;EAED,OAAO;IACLhB,MAAM;IACNE;EACF,CAAC;AACH,CAAC;AAACH,EAAA,CA5DID,aAAa;AA8DnB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}